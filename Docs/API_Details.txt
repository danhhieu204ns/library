ƒê·∫∑c t·∫£ chi ti·∫øt API Backend
T√†i li·ªáu n√†y ƒë·∫∑c t·∫£ chi ti·∫øt c√°c API endpoint cho Backend s·ª≠ d·ª•ng ExpressJS, bao g·ªìm ph∆∞∆°ng th·ª©c HTTP, ƒë∆∞·ªùng d·∫´n, m√¥ t·∫£, c·∫•u tr√∫c d·ªØ li·ªáu y√™u c·∫ßu (Request) v√† ph·∫£n h·ªìi (Response), c√πng v·ªõi y√™u c·∫ßu x√°c th·ª±c v√† ph√¢n quy·ªÅn.
Quy ∆∞·ªõc chung:
HTTP Methods: S·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c chu·∫©n (GET, POST, PUT, DELETE).
URLs: Theo c·∫•u tr√∫c RESTful, s·ª≠ d·ª•ng danh t·ª´ s·ªë nhi·ªÅu cho t√†i nguy√™n (v√≠ d·ª•: /users, /books).
Authentication: Y√™u c·∫ßu token x√°c th·ª±c (JWT) trong header Authorization: Bearer <token>.
Authorization: Ch·ªâ r√µ vai tr√≤ (Admin, CTV, DocGia) ƒë∆∞·ª£c ph√©p truy c·∫≠p endpoint.
Request Body/Response Body: S·ª≠ d·ª•ng c·∫•u tr√∫c t∆∞∆°ng t·ª± Pydantic models ho·∫∑c dictionary JSON v·ªõi ki·ªÉu d·ªØ li·ªáu.
Status Codes: S·ª≠ d·ª•ng m√£ tr·∫°ng th√°i HTTP chu·∫©n (200 OK, 201 Created, 204 No Content, 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 422 Unprocessable Entity, 500 Internal Server Error).
üîê API li√™n quan ƒë·∫øn Ng∆∞·ªùi d√πng & X√°c th·ª±c
POST /users/register
M√¥ t·∫£: ƒêƒÉng k√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng m·ªõi.
Y√™u c·∫ßu x√°c th·ª±c: Kh√¥ng b·∫Øt bu·ªôc.
Request Body:
{
  "username": "string",       // T√™n ƒëƒÉng nh·∫≠p (duy nh·∫•t)
  "password": "string",       // M·∫≠t kh·∫©u (c·∫ßn hash ·ªü backend)
  "email": "string",          // Email (duy nh·∫•t, t√πy ch·ªçn)
  "full_name": "string",      // H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß
  "phone_number": "string",   // S·ªë ƒëi·ªán tho·∫°i (t√πy ch·ªçn)
  "address": "string"         // ƒê·ªãa ch·ªâ (t√πy ch·ªçn)
}


Response (201 Created):
{
  "user_id": 1,
  "username": "string",
  "email": "string",
  "full_name": "string",
  "phone_number": "string",
  "address": "string",
  "role_id": 3,              // M·∫∑c ƒë·ªãnh l√† DocGia
  "status_id": 1,            // M·∫∑c ƒë·ªãnh l√† Active
  "registration_date": "YYYY-MM-DD",
  "created_at": "YYYY-MM-DDTHH:MM:SS.sssZ",
  "updated_at": "YYYY-MM-DDTHH:MM:SS.sssZ"
}


Response (400 Bad Request / 422 Unprocessable Entity): L·ªói validation ho·∫∑c username/email ƒë√£ t·ªìn t·∫°i.
POST /users/login
M√¥ t·∫£: ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng.
Y√™u c·∫ßu x√°c th·ª±c: Kh√¥ng b·∫Øt bu·ªôc.
Request Body:
{
  "username": "string",
  "password": "string"
}


Response (200 OK):
{
  "access_token": "string",   // JWT token
  "token_type": "bearer",
  "user_id": 1,
  "username": "string",
  "full_name": "string",
  "role_id": 3               // Vai tr√≤ ch√≠nh c·ªßa ng∆∞·ªùi d√πng
}


Response (401 Unauthorized): Sai th√¥ng tin ƒëƒÉng nh·∫≠p ho·∫∑c t√†i kho·∫£n kh√¥ng ho·∫°t ƒë·ªông.
POST /users/logout
M√¥ t·∫£: ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (b·∫•t k·ª≥ vai tr√≤ n√†o).
Request Body: Kh√¥ng c√≥.
Response (200 OK):
{
  "message": "Logout successful"
}


GET /users/me
M√¥ t·∫£: L·∫•y th√¥ng tin c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (b·∫•t k·ª≥ vai tr√≤ n√†o).
Query Params: Kh√¥ng c√≥.
Response (200 OK):
{
  "user_id": 1,
  "username": "string",
  "email": "string",
  "full_name": "string",
  "phone_number": "string",
  "address": "string",
  "role_id": 3,
  "status_id": 1,
  "registration_date": "YYYY-MM-DD",
  "created_at": "YYYY-MM-DDTHH:MM:SS.sssZ",
  "updated_at": "YYYY-MM-DDTHH:MM:SS.sssZ"
}


Response (401 Unauthorized): Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n.
PUT /users/me
M√¥ t·∫£: C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (b·∫•t k·ª≥ vai tr√≤ n√†o).
Request Body:
{
  "email": "string",          // T√πy ch·ªçn c·∫≠p nh·∫≠t
  "full_name": "string",      // T√πy ch·ªçn c·∫≠p nh·∫≠t
  "phone_number": "string",   // T√πy ch·ªçn c·∫≠p nh·∫≠t
  "address": "string",         // T√πy ch·ªçn c·∫≠p nh·∫≠t
  "password": "string"        // T√πy ch·ªçn c·∫≠p nh·∫≠t m·∫≠t kh·∫©u (c·∫ßn x√°c nh·∫≠n m·∫≠t kh·∫©u c≈©?)
}


Response (200 OK): Th√¥ng tin ng∆∞·ªùi d√πng sau khi c·∫≠p nh·∫≠t (t∆∞∆°ng t·ª± GET /users/me).
GET /users
M√¥ t·∫£: L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
Query Params:
skip: INT (S·ªë b·∫£n ghi b·ªè qua cho ph√¢n trang, m·∫∑c ƒë·ªãnh 0)
limit: INT (S·ªë b·∫£n ghi t·ªëi ƒëa tr·∫£ v·ªÅ, m·∫∑c ƒë·ªãnh 100)
role_id: INT (L·ªçc theo vai tr√≤)
status_id: INT (L·ªçc theo tr·∫°ng th√°i)
q: string (T√¨m ki·∫øm theo username, full_name, email, phone_number)
sort_by: string (S·∫Øp x·∫øp theo c·ªôt, v√≠ d·ª•: username, registration_date)
sort_order: string (Th·ª© t·ª± s·∫Øp x·∫øp: asc ho·∫∑c desc)
Response (200 OK):
[
  {
    "user_id": 1,
    "username": "string",
    "email": "string",
    "full_name": "string",
    "role_id": 3,
    "role_name": "DocGia", // C√≥ th·ªÉ join ƒë·ªÉ l·∫•y t√™n vai tr√≤
    "status_id": 1,
    "status_name": "Active", // C√≥ th·ªÉ join ƒë·ªÉ l·∫•y t√™n tr·∫°ng th√°i
    "registration_date": "YYYY-MM-DD",
    "created_at": "YYYY-MM-DDTHH:MM:SS.sssZ",
    "updated_at": "YYYY-MM-DDTHH:MM:SS.sssZ"
  },
  // ...
]


Response (401 Unauthorized): Token kh√¥ng h·ª£p l·ªá.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ vai tr√≤ Admin.
GET /users/{user_id}
M√¥ t·∫£: L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin ho·∫∑c ng∆∞·ªùi d√πng c√≥ user_id t∆∞∆°ng ·ª©ng).
Path Params:
user_id: INT (ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn l·∫•y th√¥ng tin)
Response (200 OK): Th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng (t∆∞∆°ng t·ª± GET /users/me).
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.
PUT /users/{user_id}
M√¥ t·∫£: C·∫≠p nh·∫≠t th√¥ng tin v√† ph√¢n quy·ªÅn/tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
Path Params:
user_id: INT (ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn c·∫≠p nh·∫≠t)
Request Body:
{
  "email": "string",
  "full_name": "string",
  "phone_number": "string",
  "address": "string",
  "role_id": 1,             // C·∫≠p nh·∫≠t vai tr√≤
  "status_id": 2            // C·∫≠p nh·∫≠t tr·∫°ng th√°i
}


Response (200 OK): Th√¥ng tin ng∆∞·ªùi d√πng sau khi c·∫≠p nh·∫≠t.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ vai tr√≤ Admin.
DELETE /users/{user_id}
M√¥ t·∫£: X√≥a ng∆∞·ªùi d√πng.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
Path Params:
user_id: INT (ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn x√≥a)
Response (204 No Content): X√≥a th√†nh c√¥ng.
Response (400 Bad Request): Kh√¥ng th·ªÉ x√≥a do r√†ng bu·ªôc d·ªØ li·ªáu (v√≠ d·ª•: ng∆∞·ªùi d√πng c√≤n s√°ch ƒëang m∆∞·ª£n).
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ vai tr√≤ Admin.
GET /roles
M√¥ t·∫£: L·∫•y danh s√°ch c√°c vai tr√≤.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin ho·∫∑c CTV).
Response (200 OK):
[
  {
    "role_id": 1,
    "role_name": "Admin",
    "description": "string"
  },
  // ...
]


GET /user-statuses
M√¥ t·∫£: L·∫•y danh s√°ch c√°c tr·∫°ng th√°i ng∆∞·ªùi d√πng.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
Response (200 OK):
[
  {
    "status_id": 1,
    "status_name": "Active",
    "description": "string"
  },
  // ...
]


üìö API li√™n quan ƒë·∫øn S√°ch & Danh m·ª•c
GET /books
M√¥ t·∫£: T√¨m ki·∫øm v√† l·∫•y danh s√°ch s√°ch.
Y√™u c·∫ßu x√°c th·ª±c: Kh√¥ng b·∫Øt bu·ªôc.
Query Params:
q: string (T·ª´ kh√≥a t√¨m ki·∫øm theo ti√™u ƒë·ªÅ, t√°c gi·∫£, ISBN)
genre_id: INT (L·ªçc theo th·ªÉ lo·∫°i)
language_id: INT (L·ªçc theo ng√¥n ng·ªØ)
publisher_id: INT (L·ªçc theo nh√† xu·∫•t b·∫£n)
tag_id: INT (L·ªçc theo tag)
available_only: BOOLEAN (Ch·ªâ l·∫•y s√°ch c√≤n b·∫£n sao c√≥ s·∫µn, m·∫∑c ƒë·ªãnh false)
skip: INT (Ph√¢n trang)
limit: INT (Ph√¢n trang)
sort_by: string (S·∫Øp x·∫øp: title, author, publication_year, avg_rating, available_copies...)
sort_order: string (Th·ª© t·ª±: asc, desc)
Response (200 OK):
[
  {
    "book_id": 1,
    "title": "string",
    "author": "string",
    "publisher_id": 1,
    "publisher_name": "string", // C√≥ th·ªÉ join
    "publication_year": 2023,
    "isbn": "string",
    "genre_id": 1,
    "genre_name": "string", // C√≥ th·ªÉ join
    "language_id": 1,
    "language_name": "string", // C√≥ th·ªÉ join
    "description": "string",
    "total_copies": 10,
    "available_copies": 5,
    "cover_image_url": "string",
    "avg_rating": 4.5,       // ƒêi·ªÉm ƒë√°nh gi√° trung b√¨nh (t√≠nh to√°n)
    "review_count": 10,      // S·ªë l∆∞·ª£t ƒë√°nh gi√° (t√≠nh to√°n)
    "created_at": "YYYY-MM-DDTHH:MM:SS.sssZ",
    "updated_at": "YYYY-MM-DDTHH:MM:SS.sssZ"
  },
  // ...
]


GET /books/{book_id}
M√¥ t·∫£: L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ƒë·∫ßu s√°ch, bao g·ªìm danh s√°ch b·∫£n sao v√† ƒë√°nh gi√°.
Y√™u c·∫ßu x√°c th·ª±c: Kh√¥ng b·∫Øt bu·ªôc.
Path Params:
book_id: INT (ID s√°ch)
Response (200 OK):
{
  "book_id": 1,
  "title": "string",
  "author": "string",
  // ... c√°c tr∆∞·ªùng th√¥ng tin s√°ch
  "total_copies": 10,
  "available_copies": 5,
  "avg_rating": 4.5,
  "review_count": 10,
  "copies": [             // Danh s√°ch b·∫£n sao
    {
      "copy_id": 101,
      "location_id": 1,
      "location_info": "D√£y A, K·ªá 1, T·∫ßng 2", // C√≥ th·ªÉ join
      "status_id": 1,
      "status_name": "Available", // C√≥ th·ªÉ join
      "barcode": "string",
      "due_date": null // N·∫øu tr·∫°ng th√°i l√† Borrowed, hi·ªÉn th·ªã h·∫°n tr·∫£
    },
    // ...
  ],
  "reviews": [            // Danh s√°ch ƒë√°nh gi√° (c√≥ th·ªÉ ph√¢n trang ri√™ng n·∫øu nhi·ªÅu)
    {
      "review_id": 1,
      "user_id": 10,
      "user_full_name": "string", // C√≥ th·ªÉ join
      "rating": 5,
      "comment": "string",
      "review_date": "YYYY-MM-DDTHH:MM:SS.sssZ",
      "scores": [ // ƒêi·ªÉm theo ti√™u ch√≠
        {"criteria_name": "N·ªôi dung", "score": 5},
        // ...
      ]
    },
    // ...
  ],
  "tags": [ // Danh s√°ch tags
    {"tag_id": 1, "tag_name": "string"},
    // ...
  ]
}


Response (404 Not Found): Kh√¥ng t√¨m th·∫•y s√°ch.
POST /books
M√¥ t·∫£: Th√™m s√°ch m·ªõi.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV, Admin).
Request Body:
{
  "title": "string",
  "author": "string",
  "publisher_id": 1,         // T√πy ch·ªçn
  "publication_year": 2023,  // T√πy ch·ªçn
  "isbn": "string",          // T√πy ch·ªçn
  "genre_id": 1,             // T√πy ch·ªçn
  "language_id": 1,          // T√πy ch·ªçn
  "description": "string",   // T√πy ch·ªçn
  "cover_image_url": "string", // T√πy ch·ªçn
  "initial_copies": 5,       // S·ªë l∆∞·ª£ng b·∫£n sao ban ƒë·∫ßu (t√πy ch·ªçn, >=0)
  "tag_ids": [1, 2, 3]       // Danh s√°ch ID tags (t√πy ch·ªçn)
}


Response (201 Created): Th√¥ng tin s√°ch ƒë√£ t·∫°o (t∆∞∆°ng t·ª± GET /books/{book_id} nh∆∞ng kh√¥ng bao g·ªìm copies, reviews).
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
PUT /books/{book_id}
M√¥ t·∫£: C·∫≠p nh·∫≠t th√¥ng tin s√°ch.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV, Admin).
Path Params: book_id: INT
Request Body: C·∫•u tr√∫c t∆∞∆°ng t·ª± POST, c√°c tr∆∞·ªùng l√† t√πy ch·ªçn (ch·ªâ g·ª≠i c√°c tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t).
Response (200 OK): Th√¥ng tin s√°ch sau khi c·∫≠p nh·∫≠t.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y s√°ch.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
DELETE /books/{book_id}
M√¥ t·∫£: X√≥a s√°ch.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV, Admin).
Path Params: book_id: INT
Response (204 No Content): X√≥a th√†nh c√¥ng.
Response (400 Bad Request): Kh√¥ng th·ªÉ x√≥a do r√†ng bu·ªôc (v√≠ d·ª•: c√≤n b·∫£n sao ƒëang m∆∞·ª£n).
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y s√°ch.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
API cho c√°c b·∫£ng danh m·ª•c (/genres, /languages, /publishers, /tags, /book-locations, /review-criteria, /shift-types, /penalty-rules, /user-statuses, /copy-statuses, /borrowing-statuses, /reservation-statuses, /schedule-statuses, /suggestion-statuses, /notification-types, /notification-statuses, /action-types)
M√¥ t·∫£: C√°c API CRUD c∆° b·∫£n cho c√°c b·∫£ng danh m·ª•c.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin). M·ªôt s·ªë b·∫£ng c√≥ th·ªÉ cho CTV xem (GET).
Endpoints:
GET /<resource-name>: L·∫•y danh s√°ch.
POST /<resource-name>: Th√™m m·ªõi.
GET /<resource-name>/{id}: L·∫•y chi ti·∫øt.
PUT /<resource-name>/{id}: S·ª≠a.
DELETE /<resource-name>/{id}: X√≥a.
Request/Response Body: T∆∞∆°ng ·ª©ng v·ªõi c·∫•u tr√∫c c√°c b·∫£ng danh m·ª•c ƒë√£ chi ti·∫øt h√≥a.
GET /copies
M√¥ t·∫£: L·∫•y danh s√°ch b·∫£n sao s√°ch.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV, Admin).
Query Params:
book_id: INT (L·ªçc theo ƒë·∫ßu s√°ch)
status_id: INT (L·ªçc theo tr·∫°ng th√°i b·∫£n sao)
location_id: INT (L·ªçc theo v·ªã tr√≠)
barcode: string (T√¨m theo m√£ v·∫°ch)
skip: INT (Ph√¢n trang)
limit: INT (Ph√¢n trang)
sort_by: string (S·∫Øp x·∫øp: copy_id, barcode, status_id...)
sort_order: string (asc, desc)
Response (200 OK):
[
  {
    "copy_id": 101,
    "book_id": 1,
    "book_title": "string", // C√≥ th·ªÉ join
    "location_id": 1,
    "location_info": "string", // C√≥ th·ªÉ join
    "status_id": 1,
    "status_name": "string", // C√≥ th·ªÉ join
    "barcode": "string",
    "created_at": "YYYY-MM-DDTHH:MM:SS.sssZ",
    "updated_at": "YYYY-MM-DDTHH:MM:SS.sssZ"
  },
  // ...
]


POST /copies
M√¥ t·∫£: Th√™m b·∫£n sao s√°ch m·ªõi.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV, Admin).
Request Body:
{
  "book_id": 1,
  "location_id": 1, // T√πy ch·ªçn
  "status_id": 1,   // M·∫∑c ƒë·ªãnh l√† Available?
  "barcode": "string" // T√πy ch·ªçn, h·ªá th·ªëng c√≥ th·ªÉ t·ª± sinh
}


Response (201 Created): Th√¥ng tin b·∫£n sao ƒë√£ t·∫°o.
PUT /copies/{copy_id}
M√¥ t·∫£: C·∫≠p nh·∫≠t th√¥ng tin b·∫£n sao (v·ªã tr√≠, tr·∫°ng th√°i, m√£ v·∫°ch).
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV, Admin).
Path Params: copy_id: INT
Request Body:
{
  "location_id": 2, // T√πy ch·ªçn c·∫≠p nh·∫≠t
  "status_id": 3,   // T√πy ch·ªçn c·∫≠p nh·∫≠t
  "barcode": "string" // T√πy ch·ªçn c·∫≠p nh·∫≠t
}


Response (200 OK): Th√¥ng tin b·∫£n sao sau khi c·∫≠p nh·∫≠t.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y b·∫£n sao.
DELETE /copies/{copy_id}
M√¥ t·∫£: X√≥a b·∫£n sao s√°ch.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV, Admin).
Path Params: copy_id: INT
Response (204 No Content): X√≥a th√†nh c√¥ng.
Response (400 Bad Request): Kh√¥ng th·ªÉ x√≥a do r√†ng bu·ªôc (v√≠ d·ª•: ƒëang ƒë∆∞·ª£c m∆∞·ª£n).
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y b·∫£n sao.
POST /books/{book_id}/reviews
M√¥ t·∫£: G·ª≠i ƒë√°nh gi√° v√† nh·∫≠n x√©t cho s√°ch.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: ƒê·ªôc gi·∫£).
Path Params: book_id: INT
Request Body:
{
  "rating": 5, // 1-5
  "comment": "string", // T√πy ch·ªçn
  "scores": [ // ƒêi·ªÉm theo ti√™u ch√≠ (t√πy ch·ªçn)
    {"criteria_id": 1, "score": 4},
    // ...
  ]
}


Response (201 Created): Th√¥ng tin ƒë√°nh gi√° ƒë√£ t·∫°o.
Response (400 Bad Request): ƒê√£ ƒë√°nh gi√° s√°ch n√†y r·ªìi.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
GET /books/{book_id}/reviews
M√¥ t·∫£: L·∫•y danh s√°ch ƒë√°nh gi√° v√† nh·∫≠n x√©t c·ªßa m·ªôt s√°ch.
Y√™u c·∫ßu x√°c th·ª±c: Kh√¥ng b·∫Øt bu·ªôc.
Path Params: book_id: INT
Query Params: skip, limit, sort_by, sort_order.
Response (200 OK): Danh s√°ch ƒë√°nh gi√° (t∆∞∆°ng t·ª± ph·∫ßn reviews trong GET /books/{book_id}).
POST /book-suggestions
M√¥ t·∫£: G·ª≠i ƒë·ªÅ xu·∫•t s√°ch m·ªõi.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: ƒê·ªôc gi·∫£).
Request Body:
{
  "suggested_title": "string",
  "suggested_author": "string", // T√πy ch·ªçn
  "suggested_publisher": "string", // T√πy ch·ªçn
  "suggestion_notes": "string" // T√πy ch·ªçn
}


Response (201 Created): Th√¥ng tin ƒë·ªÅ xu·∫•t ƒë√£ t·∫°o.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
GET /book-suggestions
M√¥ t·∫£: L·∫•y danh s√°ch ƒë·ªÅ xu·∫•t s√°ch.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Query Params:
status_id: INT (L·ªçc theo tr·∫°ng th√°i)
user_id: INT (L·ªçc theo ng∆∞·ªùi ƒë·ªÅ xu·∫•t)
q: string (T√¨m ki·∫øm theo ti√™u ƒë·ªÅ, t√°c gi·∫£)
skip, limit, sort_by, sort_order.
Response (200 OK):
[
  {
    "suggestion_id": 1,
    "user_id": 10,
    "user_full_name": "string", // C√≥ th·ªÉ join
    "suggested_title": "string",
    "suggested_author": "string",
    "suggestion_date": "YYYY-MM-DDTHH:MM:SS.sssZ",
    "status_id": 1,
    "status_name": "string", // C√≥ th·ªÉ join
    "handled_by_user_id": null,
    "handling_notes": null
  },
  // ...
]


Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
PUT /book-suggestions/{suggestion_id}
M√¥ t·∫£: C·∫≠p nh·∫≠t tr·∫°ng th√°i x·ª≠ l√Ω ƒë·ªÅ xu·∫•t s√°ch.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Path Params: suggestion_id: INT
Request Body:
{
  "status_id": 2, // Tr·∫°ng th√°i m·ªõi (Reviewed, Added, Rejected)
  "handling_notes": "string" // Ghi ch√∫ x·ª≠ l√Ω (t√πy ch·ªçn)
}


Response (200 OK): Th√¥ng tin ƒë·ªÅ xu·∫•t sau khi c·∫≠p nh·∫≠t.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y ƒë·ªÅ xu·∫•t.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
üìÖ API li√™n quan ƒë·∫øn M∆∞·ª£n - Tr·∫£ & ƒê·∫∑t tr∆∞·ªõc
POST /borrowings
M√¥ t·∫£: X√°c nh·∫≠n m∆∞·ª£n s√°ch.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV, Admin).
Request Body:
{
  "user_id": 10,   // Ng∆∞·ªùi m∆∞·ª£n
  "copy_id": 101   // B·∫£n sao s√°ch ƒë∆∞·ª£c m∆∞·ª£n
}


Response (201 Created):
{
  "borrow_id": 1,
  "copy_id": 101,
  "user_id": 10,
  "borrow_date": "YYYY-MM-DDTHH:MM:SS.sssZ",
  "due_date": "YYYY-MM-DDTHH:MM:SS.sssZ",
  "return_date": null,
  "status_id": 1, // Borrowed
  "fine_amount": 0.00,
  "handled_by_user_id": 20, // ID c·ªßa CTV/Admin th·ª±c hi·ªán
  "created_at": "YYYY-MM-DDTHH:MM:SS.sssZ",
  "updated_at": "YYYY-MM-DDTHH:MM:SS.sssZ"
}


Response (400 Bad Request): B·∫£n sao kh√¥ng c√≥ s·∫µn, ng∆∞·ªùi d√πng v∆∞·ª£t h·∫°n m·ª©c, v.v.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
PUT /borrowings/{borrow_id}/return
M√¥ t·∫£: X√°c nh·∫≠n tr·∫£ s√°ch.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV, Admin).
Path Params: borrow_id: INT (ID c·ªßa l∆∞·ª£t m∆∞·ª£n c·∫ßn tr·∫£)
Request Body: (T√πy ch·ªçn)
{
  "notes": "string" // Ghi ch√∫ th√™m khi tr·∫£ s√°ch
}


Response (200 OK): Th√¥ng tin l∆∞·ª£t m∆∞·ª£n sau khi tr·∫£, bao g·ªìm return_date, status_id='Returned' v√† fine_amount.
Response (400 Bad Request): L∆∞·ª£t m∆∞·ª£n kh√¥ng ·ªü tr·∫°ng th√°i 'Borrowed'.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y l∆∞·ª£t m∆∞·ª£n.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
POST /borrowings/bulk-borrow
M√¥ t·∫£: M∆∞·ª£n nhi·ªÅu s√°ch c√πng l√∫c.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV, Admin).
Request Body:
{
  "user_id": 10,
  "copy_ids": [101, 102, 105] // Danh s√°ch ID b·∫£n sao
}


Response (200 OK): K·∫øt qu·∫£ x·ª≠ l√Ω cho t·ª´ng b·∫£n sao trong danh s√°ch.
[
  {"copy_id": 101, "status": "success", "borrow_id": 1},
  {"copy_id": 102, "status": "error", "message": "B·∫£n sao kh√¥ng c√≥ s·∫µn"},
  // ...
]


Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
POST /borrowings/bulk-return
M√¥ t·∫£: Tr·∫£ nhi·ªÅu s√°ch c√πng l√∫c.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV, Admin).
Request Body:
{
  "copy_ids": [101, 102, 105] // Danh s√°ch ID b·∫£n sao c·∫ßn tr·∫£
}


Response (200 OK): K·∫øt qu·∫£ x·ª≠ l√Ω cho t·ª´ng b·∫£n sao v√† t·ªïng ph√≠ ph·∫°t.
{
  "results": [
    {"copy_id": 101, "status": "success", "borrow_id": 1, "fine_amount": 0.00},
    {"copy_id": 102, "status": "error", "message": "Kh√¥ng t√¨m th·∫•y l∆∞·ª£t m∆∞·ª£n ƒëang ho·∫°t ƒë·ªông"},
    // ...
  ],
  "total_fine_amount": 5000.00 // T·ªïng ph√≠ ph·∫°t t·ª´ c√°c l∆∞·ª£t tr·∫£ th√†nh c√¥ng
}


Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
GET /borrowings
M√¥ t·∫£: L·∫•y danh s√°ch c√°c l∆∞·ª£t m∆∞·ª£n.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (Admin/CTV xem t·∫•t c·∫£, ƒê·ªôc gi·∫£ xem c·ªßa m√¨nh).
Query Params:
user_id: INT (L·ªçc theo ng∆∞·ªùi d√πng, ch·ªâ Admin/CTV)
copy_id: INT (L·ªçc theo b·∫£n sao)
book_id: INT (L·ªçc theo ƒë·∫ßu s√°ch, c·∫ßn join Copies)
status_id: INT (L·ªçc theo tr·∫°ng th√°i m∆∞·ª£n)
borrow_date_from, borrow_date_to: DATE (L·ªçc theo kho·∫£ng ng√†y m∆∞·ª£n)
due_date_from, due_date_to: DATE (L·ªçc theo kho·∫£ng h·∫°n tr·∫£)
return_date_from, return_date_to: DATE (L·ªçc theo kho·∫£ng ng√†y tr·∫£)
is_overdue: BOOLEAN (L·ªçc c√°c l∆∞·ª£t m∆∞·ª£n qu√° h·∫°n)
skip, limit, sort_by, sort_order.
Response (200 OK): Danh s√°ch l∆∞·ª£t m∆∞·ª£n (bao g·ªìm th√¥ng tin s√°ch, ng∆∞·ªùi d√πng, b·∫£n sao).
GET /borrowings/{borrow_id}
M√¥ t·∫£: L·∫•y th√¥ng tin chi ti·∫øt m·ªôt l∆∞·ª£t m∆∞·ª£n.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (Admin/CTV xem b·∫•t k·ª≥, ƒê·ªôc gi·∫£ ch·ªâ xem c·ªßa m√¨nh).
Path Params: borrow_id: INT
Response (200 OK): Th√¥ng tin chi ti·∫øt l∆∞·ª£t m∆∞·ª£n.
POST /reservations
M√¥ t·∫£: ƒê·∫∑t m∆∞·ª£n s√°ch tr∆∞·ªõc.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: ƒê·ªôc gi·∫£).
Request Body:
{
  "book_id": 1 // ƒê·∫ßu s√°ch mu·ªën ƒë·∫∑t
}


Response (201 Created): Th√¥ng tin l∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc ƒë√£ t·∫°o.
{
  "reservation_id": 1,
  "book_id": 1,
  "user_id": 10,
  "reservation_date": "YYYY-MM-DDTHH:MM:SS.sssZ",
  "expiry_date": "YYYY-MM-DDTHH:MM:SS.sssZ",
  "status_id": 1, // Pending
  "assigned_copy_id": null,
  "handled_by_user_id": null,
  "created_at": "YYYY-MM-DDTHH:MM:SS.sssZ",
  "updated_at": "YYYY-MM-DDTHH:MM:SS.sssZ"
}


Response (400 Bad Request): ƒê√£ ƒë·∫∑t s√°ch n√†y r·ªìi, s√°ch kh√¥ng cho ph√©p ƒë·∫∑t tr∆∞·ªõc, v.v.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
PUT /reservations/{reservation_id}/cancel
M√¥ t·∫£: H·ªßy l∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (ƒê·ªôc gi·∫£ ch·ªâ h·ªßy c·ªßa m√¨nh, CTV/Admin h·ªßy b·∫•t k·ª≥).
Path Params: reservation_id: INT
Response (200 OK): Th√¥ng tin l∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc sau khi h·ªßy (status_id='Cancelled').
Response (400 Bad Request): L∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc kh√¥ng ·ªü tr·∫°ng th√°i c√≥ th·ªÉ h·ªßy.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn ho·∫∑c kh√¥ng ph·∫£i l∆∞·ª£t ƒë·∫∑t c·ªßa m√¨nh.
PUT /reservations/{reservation_id}/assign-copy
M√¥ t·∫£: G√°n b·∫£n sao s√°ch cho l∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV, Admin).
Path Params: reservation_id: INT
Request Body:
{
  "copy_id": 101 // B·∫£n sao s√°ch ƒë∆∞·ª£c g√°n
}


Response (200 OK): Th√¥ng tin l∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc sau khi g√°n (status_id='Ready', assigned_copy_id).
Response (400 Bad Request): L∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc kh√¥ng ·ªü tr·∫°ng th√°i 'Pending', b·∫£n sao kh√¥ng c√≥ s·∫µn, b·∫£n sao kh√¥ng thu·ªôc ƒë·∫ßu s√°ch ƒë·∫∑t tr∆∞·ªõc.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc ho·∫∑c b·∫£n sao.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
GET /reservations
M√¥ t·∫£: L·∫•y danh s√°ch c√°c l∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (Admin/CTV xem t·∫•t c·∫£, ƒê·ªôc gi·∫£ xem c·ªßa m√¨nh).
Query Params:
user_id: INT (L·ªçc theo ng∆∞·ªùi d√πng, ch·ªâ Admin/CTV)
book_id: INT (L·ªçc theo ƒë·∫ßu s√°ch)
status_id: INT (L·ªçc theo tr·∫°ng th√°i ƒë·∫∑t tr∆∞·ªõc)
reservation_date_from, reservation_date_to: DATE
expiry_date_from, expiry_date_to: DATE
skip, limit, sort_by, sort_order.
Response (200 OK): Danh s√°ch l∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc (bao g·ªìm th√¥ng tin s√°ch, ng∆∞·ªùi d√πng).
GET /reservations/{reservation_id}
M√¥ t·∫£: L·∫•y th√¥ng tin chi ti·∫øt m·ªôt l∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (Admin/CTV xem b·∫•t k·ª≥, ƒê·ªôc gi·∫£ ch·ªâ xem c·ªßa m√¨nh).
Path Params: reservation_id: INT
Response (200 OK): Th√¥ng tin chi ti·∫øt l∆∞·ª£t ƒë·∫∑t tr∆∞·ªõc.
API cho c√°c b·∫£ng tr·∫°ng th√°i m∆∞·ª£n/ƒë·∫∑t (/borrowing-statuses, /reservation-statuses)
M√¥ t·∫£: C√°c API GET c∆° b·∫£n ƒë·ªÉ l·∫•y danh s√°ch tr·∫°ng th√°i.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
üßë‚Äçü§ù‚Äçüßë API li√™n quan ƒë·∫øn C·ªông t√°c vi√™n & L·ªãch tr·ª±c
POST /schedules
M√¥ t·∫£: C·ªông t√°c vi√™n ƒëƒÉng k√Ω l·ªãch tr·ª±c.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: CTV).
Request Body:
{
  "shift_date": "YYYY-MM-DD",
  "shift_type_id": 1 // ID lo·∫°i ca tr·ª±c
}


Response (201 Created): Th√¥ng tin l·ªãch tr·ª±c ƒë√£ t·∫°o (status_id='Pending').
Response (400 Bad Request): ƒê√£ ƒëƒÉng k√Ω l·ªãch n√†y r·ªìi, ng√†y kh√¥ng h·ª£p l·ªá.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn CTV.
GET /schedules
M√¥ t·∫£: L·∫•y danh s√°ch l·ªãch tr·ª±c.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (CTV xem c·ªßa m√¨nh, Admin xem t·∫•t c·∫£).
Query Params:
user_id: INT (L·ªçc theo CTV, ch·ªâ Admin)
status_id: INT (L·ªçc theo tr·∫°ng th√°i)
date: DATE (L·ªçc theo ng√†y c·ª• th·ªÉ)
date_from, date_to: DATE (L·ªçc theo kho·∫£ng ng√†y)
shift_type_id: INT (L·ªçc theo lo·∫°i ca)
skip, limit, sort_by, sort_order.
Response (200 OK): Danh s√°ch l·ªãch tr·ª±c (bao g·ªìm th√¥ng tin CTV, lo·∫°i ca).
PUT /schedules/{schedule_id}/approve
M√¥ t·∫£: Admin duy·ªát l·ªãch tr·ª±c.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
Path Params: schedule_id: INT
Response (200 OK): Th√¥ng tin l·ªãch tr·ª±c sau khi duy·ªát (status_id='Approved', approved_by_user_id).
Response (400 Bad Request): L·ªãch tr·ª±c kh√¥ng ·ªü tr·∫°ng th√°i 'Pending'.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y l·ªãch tr·ª±c.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn Admin.
PUT /schedules/{schedule_id}/reject
M√¥ t·∫£: Admin t·ª´ ch·ªëi l·ªãch tr·ª±c.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
Path Params: schedule_id: INT
Request Body: (T√πy ch·ªçn)
{
  "notes": "string" // L√Ω do t·ª´ ch·ªëi
}


Response (200 OK): Th√¥ng tin l·ªãch tr·ª±c sau khi t·ª´ ch·ªëi (status_id='Rejected', approved_by_user_id, notes).
Response (400 Bad Request): L·ªãch tr·ª±c kh√¥ng ·ªü tr·∫°ng th√°i 'Pending'.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y l·ªãch tr·ª±c.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn Admin.
POST /schedules/assign
M√¥ t·∫£: Admin ch·ªâ ƒë·ªãnh l·ªãch tr·ª±c cho CTV.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
Request Body:
{
  "user_id": 20, // CTV ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
  "shift_date": "YYYY-MM-DD",
  "shift_type_id": 1
}


Response (201 Created): Th√¥ng tin l·ªãch tr·ª±c ƒë√£ t·∫°o (status_id='Approved', approved_by_user_id).
Response (400 Bad Request): L·ªãch tr·ª±c ƒë√£ t·ªìn t·∫°i cho CTV ƒë√≥ v√†o ng√†y/ca ƒë√≥.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn Admin.
PUT /schedules/{schedule_id}
M√¥ t·∫£: Admin s·ª≠a l·ªãch tr·ª±c.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
Path Params: schedule_id: INT
Request Body:
{
  "shift_date": "YYYY-MM-DD", // T√πy ch·ªçn c·∫≠p nh·∫≠t
  "shift_type_id": 2,         // T√πy ch·ªçn c·∫≠p nh·∫≠t
  "status_id": 1,             // T√πy ch·ªçn c·∫≠p nh·∫≠t tr·∫°ng th√°i (Approved, Pending, Rejected)
  "notes": "string"           // T√πy ch·ªçn c·∫≠p nh·∫≠t
}


Response (200 OK): Th√¥ng tin l·ªãch tr·ª±c sau khi c·∫≠p nh·∫≠t.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y l·ªãch tr·ª±c.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn Admin.
DELETE /schedules/{schedule_id}
M√¥ t·∫£: Admin x√≥a l·ªãch tr·ª±c.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
Path Params: schedule_id: INT
Response (204 No Content): X√≥a th√†nh c√¥ng.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y l·ªãch tr·ª±c.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn Admin.
GET /shift-types
M√¥ t·∫£: L·∫•y danh s√°ch c√°c lo·∫°i ca tr·ª±c.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Response (200 OK): Danh s√°ch lo·∫°i ca tr·ª±c.
GET /schedule-statuses
M√¥ t·∫£: L·∫•y danh s√°ch tr·∫°ng th√°i l·ªãch tr·ª±c.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Response (200 OK): Danh s√°ch tr·∫°ng th√°i l·ªãch tr·ª±c.
GET /library/open-hours
M√¥ t·∫£: L·∫•y gi·ªù m·ªü c·ª≠a d·ª±a tr√™n l·ªãch tr·ª±c ƒë√£ duy·ªát.
Y√™u c·∫ßu x√°c th·ª±c: Kh√¥ng b·∫Øt bu·ªôc.
Query Params:
start_date: DATE (Ng√†y b·∫Øt ƒë·∫ßu)
end_date: DATE (Ng√†y k·∫øt th√∫c)
Response (200 OK):
[
  {
    "date": "YYYY-MM-DD",
    "shifts": [
      {"shift_name": "Ca s√°ng", "start_time": "HH:MM", "end_time": "HH:MM"},
      // ... c√°c ca tr·ª±c ƒë√£ duy·ªát trong ng√†y
    ]
  },
  // ... c√°c ng√†y kh√°c
]


üìä API li√™n quan ƒë·∫øn Th·ªëng k√™ & B√°o c√°o
GET /reports/book-stats
M√¥ t·∫£: Th·ªëng k√™ s·ªë s√°ch theo th·ªÉ lo·∫°i, s·ªë s√°ch ƒëang m∆∞·ª£n/ƒë·∫∑t tr∆∞·ªõc.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Query Params:
type: string (Lo·∫°i th·ªëng k√™: by_genre, borrowed_count, reserved_count)
Response (200 OK): C·∫•u tr√∫c response ph·ª• thu·ªôc v√†o type.
type=by_genre: [{"genre_name": "string", "book_count": 100}, ...]
type=borrowed_count: {"borrowed_count": 500}
type=reserved_count: {"reserved_count": 150}
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
GET /reports/top-books
M√¥ t·∫£: Top s√°ch ƒë∆∞·ª£c quan t√¢m/m∆∞·ª£n nhi·ªÅu.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Query Params:
criteria: string (Ti√™u ch√≠: most_borrowed, most_reserved, highest_rating)
limit: INT (S·ªë l∆∞·ª£ng s√°ch trong top, m·∫∑c ƒë·ªãnh 10)
date_from, date_to: DATE (Kho·∫£ng th·ªùi gian ƒë·ªÉ t√≠nh to√°n, t√πy ch·ªçn)
Response (200 OK): Danh s√°ch s√°ch (bao g·ªìm s·ªë li·ªáu t∆∞∆°ng ·ª©ng v·ªõi ti√™u ch√≠).
GET /reports/user-borrowing-stats
M√¥ t·∫£: Th·ªëng k√™ ho·∫°t ƒë·ªông m∆∞·ª£n c·ªßa b·∫°n ƒë·ªçc.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Query Params:
user_id: INT (L·ªçc theo ng∆∞·ªùi d√πng, t√πy ch·ªçn)
date_from, date_to: DATE (Kho·∫£ng th·ªùi gian, t√πy ch·ªçn)
skip, limit, sort_by, sort_order.
Response (200 OK): Danh s√°ch ƒë·ªôc gi·∫£ k√®m s·ªë li·ªáu m∆∞·ª£n tr·∫£.
[
  {
    "user_id": 10,
    "full_name": "string",
    "total_borrowed_count": 50,
    "current_borrowed_count": 5,
    "overdue_count": 2,
    "total_fine_amount": 15000.00
  },
  // ...
]


GET /reports/ctv-schedule-history
M√¥ t·∫£: L·ªãch s·ª≠ tr·ª±c c·ªßa c·ªông t√°c vi√™n.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Query Params:
user_id: INT (L·ªçc theo CTV, t√πy ch·ªçn)
date_from, date_to: DATE (Kho·∫£ng th·ªùi gian, t√πy ch·ªçn)
status_id: INT (L·ªçc theo tr·∫°ng th√°i l·ªãch tr·ª±c, t√πy ch·ªçn)
skip, limit, sort_by, sort_order.
Response (200 OK): Danh s√°ch l·ªãch tr·ª±c trong qu√° kh·ª© (t∆∞∆°ng t·ª± GET /schedules nh∆∞ng t·∫≠p trung v√†o l·ªãch ƒë√£ ho√†n th√†nh).
GET /reports/export
M√¥ t·∫£: Xu·∫•t b√°o c√°o th·ªëng k√™.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Query Params:
report_type: string (Lo·∫°i b√°o c√°o c·∫ßn xu·∫•t: book_stats, top_books, user_borrowing_stats, ctv_schedule_history)
format: string (ƒê·ªãnh d·∫°ng: csv, pdf)
...: C√°c query params kh√°c t√πy thu·ªôc v√†o report_type (b·ªô l·ªçc, ti√™u ch√≠...).
Response (200 OK): Tr·∫£ v·ªÅ t·ªáp b√°o c√°o (CSV ho·∫∑c PDF).
Response (400 Bad Request): Tham s·ªë kh√¥ng h·ª£p l·ªá.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
GET /dashboard/summary
M√¥ t·∫£: D·ªØ li·ªáu t·ªïng quan cho Dashboard Admin/CTV.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Response (200 OK):
{
  "current_borrowed_count": 500,
  "pending_reservations_count": 50,
  "pending_suggestions_count": 10,
  "upcoming_schedules_count": 15, // L·ªãch tr·ª±c s·∫Øp t·ªõi c·ªßa CTV (n·∫øu l√† CTV, ch·ªâ c·ªßa m√¨nh)
  "unread_notifications_count": 5, // Th√¥ng b√°o ch∆∞a ƒë·ªçc
  // ... c√°c ch·ªâ s·ªë quan tr·ªçng kh√°c
}


GET /activity-logs
M√¥ t·∫£: Xem l·ªãch s·ª≠ ho·∫°t ƒë·ªông.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
Query Params:
user_id: INT (L·ªçc theo ng∆∞·ªùi d√πng, t√πy ch·ªçn)
action_type_id: INT (L·ªçc theo lo·∫°i h√†nh ƒë·ªông, t√πy ch·ªçn)
resource_type: string (L·ªçc theo lo·∫°i t√†i nguy√™n, t√πy ch·ªçn)
resource_id: INT (L·ªçc theo ID t√†i nguy√™n, t√πy ch·ªçn)
date_from, date_to: DATE (Kho·∫£ng th·ªùi gian, t√πy ch·ªçn)
q: string (T√¨m ki·∫øm trong m√¥ t·∫£ h√†nh ƒë·ªông, t√πy ch·ªçn)
skip, limit, sort_by, sort_order.
Response (200 OK): Danh s√°ch log ho·∫°t ƒë·ªông.
GET /audit-logs
M√¥ t·∫£: Xem l·ªãch s·ª≠ thay ƒë·ªïi d·ªØ li·ªáu quan tr·ªçng.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
Query Params:
user_id: INT (Ng∆∞·ªùi th·ª±c hi·ªán thay ƒë·ªïi, t√πy ch·ªçn)
table_name: string (T√™n b·∫£ng, t√πy ch·ªçn)
record_id: INT (ID b·∫£n ghi, t√πy ch·ªçn)
action_type: string (Lo·∫°i thao t√°c: INSERT, UPDATE, DELETE, t√πy ch·ªçn)
date_from, date_to: DATE (Kho·∫£ng th·ªùi gian, t√πy ch·ªçn)
skip, limit, sort_by, sort_order.
Response (200 OK): Danh s√°ch log audit.
GET /copies/{copy_id}/history
M√¥ t·∫£: Xem l·ªãch s·ª≠ chi ti·∫øt c·ªßa m·ªôt b·∫£n sao s√°ch.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Path Params: copy_id: INT
Query Params: skip, limit, sort_by, sort_order.
Response (200 OK): Danh s√°ch c√°c s·ª± ki·ªán l·ªãch s·ª≠ c·ªßa b·∫£n sao ƒë√≥.
GET /search-logs
M√¥ t·∫£: Xem l·ªãch s·ª≠ t√¨m ki·∫øm.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
Query Params:
user_id: INT (Ng∆∞·ªùi d√πng t√¨m ki·∫øm, t√πy ch·ªçn)
q: string (Chu·ªói t√¨m ki·∫øm, t√πy ch·ªçn)
date_from, date_to: DATE (Kho·∫£ng th·ªùi gian, t√πy ch·ªçn)
skip, limit, sort_by, sort_order.
Response (200 OK): Danh s√°ch log t√¨m ki·∫øm.
üîî API li√™n quan ƒë·∫øn Th√¥ng b√°o & Nh·∫Øc nh·ªü
GET /notifications/me
M√¥ t·∫£: L·∫•y danh s√°ch th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (b·∫•t k·ª≥ vai tr√≤ n√†o).
Query Params:
status_id: INT (L·ªçc theo tr·∫°ng th√°i: Unread, Read)
type_id: INT (L·ªçc theo lo·∫°i th√¥ng b√°o)
skip, limit, sort_by, sort_order.
Response (200 OK): Danh s√°ch th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng.
[
  {
    "notification_id": 1,
    "user_id": 10,
    "type_id": 1,
    "type_name": "BorrowDueReminder", // C√≥ th·ªÉ join
    "content": "string",
    "status_id": 1, // Unread
    "status_name": "Unread", // C√≥ th·ªÉ join
    "delivery_method": "Email",
    "related_record_type": "Borrowing",
    "related_record_id": 10,
    "created_at": "YYYY-MM-DDTHH:MM:SS.sssZ",
    "sent_at": "YYYY-MM-DDTHH:MM:SS.sssZ" // NULL n·∫øu ch∆∞a g·ª≠i
  },
  // ...
]


PUT /notifications/{notification_id}/mark-as-read
M√¥ t·∫£: ƒê√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (Ng∆∞·ªùi d√πng ch·ªâ ƒë√°nh d·∫•u c·ªßa m√¨nh).
Path Params: notification_id: INT
Response (200 OK): Th√¥ng tin th√¥ng b√°o sau khi c·∫≠p nh·∫≠t (status_id='Read').
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y th√¥ng b√°o.
Response (403 Forbidden): Kh√¥ng ph·∫£i th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng.
API cho c√°c b·∫£ng lo·∫°i/tr·∫°ng th√°i th√¥ng b√°o (/notification-types, /notification-statuses)
M√¥ t·∫£: C√°c API GET c∆° b·∫£n ƒë·ªÉ l·∫•y danh s√°ch lo·∫°i/tr·∫°ng th√°i th√¥ng b√°o.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin).
‚ú® API li√™n quan ƒë·∫øn S·ª± ki·ªán
GET /events
M√¥ t·∫£: L·∫•y danh s√°ch s·ª± ki·ªán.
Y√™u c·∫ßu x√°c th·ª±c: Kh√¥ng b·∫Øt bu·ªôc.
Query Params:
upcoming_only: BOOLEAN (Ch·ªâ l·∫•y s·ª± ki·ªán s·∫Øp di·ªÖn ra/ƒëang di·ªÖn ra, m·∫∑c ƒë·ªãnh true)
date_from, date_to: DATE (Kho·∫£ng th·ªùi gian, t√πy ch·ªçn)
q: string (T√¨m ki·∫øm theo t√™n, m√¥ t·∫£, ƒë·ªãa ƒëi·ªÉm)
skip, limit, sort_by, sort_order.
Response (200 OK): Danh s√°ch s·ª± ki·ªán.
[
  {
    "event_id": 1,
    "event_name": "string",
    "description": "string",
    "event_date": "YYYY-MM-DD",
    "start_time": "HH:MM:SS",
    "end_time": "HH:MM:SS", // NULL n·∫øu kh√¥ng c√≥
    "location": "string",
    "organizer_user_id": 20, // NULL n·∫øu kh√¥ng c√≥
    "organizer_full_name": "string", // C√≥ th·ªÉ join
    "created_at": "YYYY-MM-DDTHH:MM:SS.sssZ",
    "updated_at": "YYYY-MM-DDTHH:MM:SS.sssZ"
  },
  // ...
]


GET /events/{event_id}
M√¥ t·∫£: L·∫•y th√¥ng tin chi ti·∫øt m·ªôt s·ª± ki·ªán.
Y√™u c·∫ßu x√°c th·ª±c: Kh√¥ng b·∫Øt bu·ªôc.
Path Params: event_id: INT
Response (200 OK): Th√¥ng tin chi ti·∫øt s·ª± ki·ªán.
POST /events
M√¥ t·∫£: Th√™m s·ª± ki·ªán m·ªõi.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Request Body:
{
  "event_name": "string",
  "description": "string",
  "event_date": "YYYY-MM-DD",
  "start_time": "HH:MM:SS",
  "end_time": "HH:MM:SS", // T√πy ch·ªçn
  "location": "string", // T√πy ch·ªçn
  "organizer_user_id": 20 // T√πy ch·ªçn, m·∫∑c ƒë·ªãnh l√† ng∆∞·ªùi t·∫°o?
}


Response (201 Created): Th√¥ng tin s·ª± ki·ªán ƒë√£ t·∫°o.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
PUT /events/{event_id}
M√¥ t·∫£: S·ª≠a th√¥ng tin s·ª± ki·ªán.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Path Params: event_id: INT
Request Body: C·∫•u tr√∫c t∆∞∆°ng t·ª± POST, c√°c tr∆∞·ªùng l√† t√πy ch·ªçn.
Response (200 OK): Th√¥ng tin s·ª± ki·ªán sau khi c·∫≠p nh·∫≠t.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
DELETE /events/{event_id}
M√¥ t·∫£: X√≥a s·ª± ki·ªán.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Path Params: event_id: INT
Response (204 No Content): X√≥a th√†nh c√¥ng.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
POST /events/{event_id}/register
M√¥ t·∫£: ƒêƒÉng k√Ω tham gia s·ª± ki·ªán.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: ƒê·ªôc gi·∫£).
Path Params: event_id: INT
Response (201 Created): Th√¥ng tin ƒëƒÉng k√Ω.
{
  "registration_id": 1,
  "event_id": 1,
  "user_id": 10,
  "registration_date": "YYYY-MM-DDTHH:MM:SS.sssZ"
}


Response (400 Bad Request): ƒê√£ ƒëƒÉng k√Ω r·ªìi, s·ª± ki·ªán ƒë√£ k·∫øt th√∫c, s·ª± ki·ªán kh√¥ng cho ph√©p ƒëƒÉng k√Ω.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn ƒê·ªôc gi·∫£.
DELETE /events/{event_id}/register
M√¥ t·∫£: H·ªßy ƒëƒÉng k√Ω tham gia s·ª± ki·ªán.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: ƒê·ªôc gi·∫£).
Path Params: event_id: INT
Response (204 No Content): H·ªßy ƒëƒÉng k√Ω th√†nh c√¥ng.
Response (404 Not Found): Kh√¥ng t√¨m th·∫•y ƒëƒÉng k√Ω c·ªßa ng∆∞·ªùi d√πng cho s·ª± ki·ªán n√†y.
Response (403 Forbidden): Kh√¥ng ph·∫£i ƒëƒÉng k√Ω c·ªßa ng∆∞·ªùi d√πng.
GET /events/{event_id}/registrations
M√¥ t·∫£: L·∫•y danh s√°ch ng∆∞·ªùi ƒëƒÉng k√Ω tham gia s·ª± ki·ªán.
Y√™u c·∫ßu x√°c th·ª±c: B·∫Øt bu·ªôc (vai tr√≤: Admin, CTV).
Path Params: event_id: INT
Query Params: skip, limit.
Response (200 OK): Danh s√°ch ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω.
[
  {
    "user_id": 10,
    "full_name": "string",
    "registration_date": "YYYY-MM-DDTHH:MM:SS.sssZ"
  },
  // ...
]


Response (404 Not Found): Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán.
Response (403 Forbidden): Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn.
T√†i li·ªáu n√†y cung c·∫•p ƒë·∫∑c t·∫£ chi ti·∫øt cho c√°c API endpoint ch√≠nh. ƒê√¢y s·∫Ω l√† c∆° s·ªü ƒë·ªÉ b·∫°n ƒë·ªãnh nghƒ©a c√°c Pydantic schemas v√† tri·ªÉn khai logic trong FastAPI.
B∆∞·ªõc ti·∫øp theo, b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu vi·∫øt code Backend, b·∫Øt ƒë·∫ßu t·ª´ vi·ªác thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng, k·∫øt n·ªëi CSDL v√† ƒë·ªãnh nghƒ©a c√°c models/schemas/endpoints c∆° b·∫£n.

